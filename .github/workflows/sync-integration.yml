name: Sync Shared Directory

on:
  push:
    branches: [ main ]
    paths:
      - 'shared/**'
      - '.github/workflows/**'
  pull_request:
    types: [closed]
    branches: [ main ]
    paths:
      - 'shared/**'
  workflow_dispatch:

jobs:
  sync-shared:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    strategy:
      matrix:
        team: [
          {
            name: 'right',
            repo: 'KDT-PWA-1-Project-A-Team-Right'
          },
          {
            name: 'left',
            repo: 'KDT-PWA-1-Project-A-Team-Left'
          }
        ]
      fail-fast: false

    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: source-repo

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: KDT-PWA-Class-One-Group/${{ matrix.team.repo }}
          token: ${{ secrets.PAT_TOKEN }}
          path: target-repo
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # yarn 초기화 전에 package.json 존재 여부 확인
      - name: Check package.json
        run: |
          if [ ! -f "source-repo/shared/package.json" ]; then
            echo "Error: package.json not found in source-repo/shared"
            exit 1
          fi

      - name: Initialize yarn
        run: |
          cd source-repo/shared
          echo "Installing dependencies..."
          # yarn.lock이 없으면 새로 생성
          if [ ! -f "yarn.lock" ]; then
            echo "Creating new yarn.lock file..."
            yarn install
          else
            echo "Using existing yarn.lock file..."
            yarn install --frozen-lockfile
          fi

      - name: Create sync branch
        working-directory: target-repo
        run: |
          # 기존 sync 브랜치가 있다면 삭제
          git fetch origin
          git branch -D sync/shared-update 2>/dev/null || true
          git push origin --delete sync/shared-update 2>/dev/null || true

          # main에서 새로운 sync 브랜치 생성
          git checkout -b sync/shared-update main

      - name: Sync shared directory
        run: |
          # target-repo의 shared 디렉토리 백업 (있는 경우)
          if [ -d "target-repo/shared" ]; then
            mv target-repo/shared target-repo/shared.bak
          fi

          # shared 디렉토리 복사
          cp -r source-repo/shared target-repo/

          # yarn.lock 파일 복사
          if [ -f "source-repo/shared/yarn.lock" ]; then
            cp source-repo/shared/yarn.lock target-repo/shared/
          fi

          # 파일 권한 설정
          cd target-repo/shared
          find . -type f -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;

      - name: Verify files and test setup
        working-directory: target-repo
        run: |
          cd shared
          echo "Verifying package.json and dependencies..."
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found after sync"
            exit 1
          fi

          echo "Installing dependencies..."
          yarn install

          echo "Running tests..."
          yarn lint || echo "Lint check skipped"
          yarn type-check || echo "Type check skipped"

      - name: Commit changes
        working-directory: target-repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add shared/

          if ! git diff --cached --quiet; then
            git commit -m "chore: sync shared configurations

            🔄 자동 동기화 완료
            - 시간: $(date)
            - 대상: ${{ matrix.team.repo }}

            변경된 파일:
            $(git diff --cached --name-only | sed 's/^/- /')"

            echo "Changes committed successfully"
          else
            echo "No changes to commit"
          fi

      - name: Push changes and create PR
        working-directory: target-repo
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          if git rev-parse --verify sync/shared-update >/dev/null 2>&1; then
            echo "Pushing changes..."
            git push -f origin sync/shared-update

            echo "Creating pull request..."
            gh pr create \
              --title "chore: shared 설정 파일 동기화" \
              --body "## 설정 파일 동기화

              ### 변경된 파일
              $(git diff main...sync/shared-update --name-only | sed 's/^/- /')

              ### 주의사항
              - [ ] package.json 변경사항 확인
              - [ ] yarn install 실행 필요
              - [ ] 설정 파일 충돌 여부 확인

              자동으로 생성된 PR입니다. 리뷰 후 병합해주세요." \
              --base main \
              --head sync/shared-update || true
          else
            echo "No sync branch found, skipping PR creation"
          fi

      - name: Cleanup on failure
        if: failure()
        working-directory: target-repo
        run: |
          if [ -d "shared.bak" ]; then
            rm -rf shared
            mv shared.bak shared
            echo "Restored backup of shared directory"
          fi

      - name: Create sync report
        if: always()
        run: |
          {
            echo "### 동기화 결과 - ${{ matrix.team.name }} 팀"
            echo "- 저장소: ${{ matrix.team.repo }}"
            echo "- 상태: ${{ job.status }}"
            echo "- 브랜치: sync/shared-update"

            if [ -d "target-repo" ]; then
              cd target-repo
              if git diff --cached --quiet; then
                echo "- 변경사항: 없음"
              else
                echo "- 변경된 파일:"
                git diff --cached --name-only | sed 's/^/  - /'
              fi
            fi
          } >> $GITHUB_STEP_SUMMARY

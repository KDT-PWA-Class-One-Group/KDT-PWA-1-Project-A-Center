name: Sync Shared Directory

on:
  push:
    branches: [ main ]
    paths:
      - 'shared/**'
      - '.github/workflows/**'
  pull_request:
    types: [closed]
    branches: [ main ]
    paths:
      - 'shared/**'
  workflow_dispatch:

jobs:
  sync-shared:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    strategy:
      matrix:
        team: [
          {
            name: 'right',
            repo: 'KDT-PWA-1-Project-A-Team-Right'
          },
          {
            name: 'left',
            repo: 'KDT-PWA-1-Project-A-Team-Left'
          }
        ]
      fail-fast: false

    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: source-repo

      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: KDT-PWA-Class-One-Group/${{ matrix.team.repo }}
          token: ${{ secrets.PAT_TOKEN }}
          path: target-repo
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create sync branch
        working-directory: target-repo
        run: |
          git fetch origin
          git branch -D sync/shared-update 2>/dev/null || true
          git push origin --delete sync/shared-update 2>/dev/null || true
          git checkout -b sync/shared-update main

      - name: Sync shared content
        run: |
          # 동기화할 디렉토리와 파일 목록
          SYNC_ITEMS=(
            # 설정 파일
            ".eslintrc.json"
            ".prettierrc"
            "tsconfig.json"
            "package.json"
            ".gitignore"
            # 소스 디렉토리
            "src"
            # 컴포넌트 디렉토리
            "components"
            # 유틸리티
            "utils"
            # 타입 정의
            "types"
            # 테스트 관련
            "tests"
            "jest.config.js"
            "cypress.config.ts"
            # 스타일 관련
            "styles"
            # 기타 리소스
            "assets"
            "public"
            # API 관련
            "api"
            # 상수 및 설정
            "constants"
            "config"
          )

          cd target-repo

          # 백업 디렉토리 생성
          BACKUP_DIR=".sync-backup-$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"

          # 기존 파일 백업 및 새 파일 복사
          for item in "${SYNC_ITEMS[@]}"; do
            # 소스 경로
            SOURCE_PATH="../source-repo/shared/$item"
            # 대상 경로 (루트 디렉토리 기준)
            TARGET_PATH="./$item"

            # 소스가 존재하는 경우에만 처리
            if [ -e "$SOURCE_PATH" ]; then
              # 기존 파일/디렉토리가 있으면 백업
              if [ -e "$TARGET_PATH" ]; then
                echo "Backing up $item to $BACKUP_DIR"
                mv "$TARGET_PATH" "$BACKUP_DIR/"
              fi

              # 파일/디렉토리 복사
              echo "Copying $item from shared"
              cp -r "$SOURCE_PATH" "$TARGET_PATH"
            fi
          done

          # package.json 병합 (의존성 유지)
          if [ -f "package.json" ] && [ -f "$BACKUP_DIR/package.json" ]; then
            echo "Merging package.json dependencies..."
            node -e "
              const source = require('./package.json');
              const target = require('./$BACKUP_DIR/package.json');

              // 기존 의존성 유지하면서 새로운 의존성 추가
              source.dependencies = {
                ...target.dependencies,
                ...source.dependencies
              };
              source.devDependencies = {
                ...target.devDependencies,
                ...source.devDependencies
              };

              // 스크립트 병합
              source.scripts = {
                ...target.scripts,
                ...source.scripts
              };

              require('fs').writeFileSync(
                'package.json',
                JSON.stringify(source, null, 2)
              );
            "
          fi

      - name: Install dependencies and verify
        working-directory: target-repo
        run: |
          if [ -f "package.json" ]; then
            echo "Installing dependencies..."
            yarn install

            echo "Running verification..."
            if [ -f "yarn.lock" ]; then
              yarn lint || echo "Lint check skipped"
              yarn type-check || echo "Type check skipped"
              yarn test || echo "Tests skipped"
            fi
          fi

      - name: Commit changes
        working-directory: target-repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add .

          if ! git diff --cached --quiet; then
            # 변경된 파일 목록 생성
            CHANGED_FILES=$(git diff --cached --name-only)
            # 변경된 디렉토리 목록 생성
            CHANGED_DIRS=$(echo "$CHANGED_FILES" | grep "/" | cut -d/ -f1 | sort -u)

            COMMIT_MSG="chore: sync shared configurations and resources

            🔄 동기화된 항목:
            $(echo "$CHANGED_DIRS" | sed 's/^/- /')

            📝 변경된 파일:
            $(echo "$CHANGED_FILES" | sed 's/^/- /')

            ⏰ 동기화 시간: $(date)
            🎯 대상: ${{ matrix.team.repo }}"

            git commit -m "$COMMIT_MSG"
            echo "Changes committed successfully"
          else
            echo "No changes to commit"
          fi

      - name: Push changes and create PR
        working-directory: target-repo
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          if git rev-parse --verify sync/shared-update >/dev/null 2>&1; then
            echo "Pushing changes..."
            git push -f origin sync/shared-update

            echo "Creating pull request..."
            gh pr create \
              --title "chore: 공유 리소스 동기화" \
              --body "## 공유 리소스 동기화

              ### 변경된 디렉토리
              $(git diff main...sync/shared-update --name-only | grep "/" | cut -d/ -f1 | sort -u | sed 's/^/- /')

              ### 변경된 파일
              $(git diff main...sync/shared-update --name-only | sed 's/^/- /')

              ### 주의사항
              - [ ] package.json 변경사항 확인
              - [ ] yarn install 실행 필요
              - [ ] 설정 파일 충돌 여부 확인
              - [ ] 테스트 실행 필요

              자동으로 생성된 PR입니다. 리뷰 후 병합해주세요." \
              --base main \
              --head sync/shared-update || true
          fi

      - name: Cleanup on failure
        if: failure()
        working-directory: target-repo
        run: |
          if [ -d ".sync-backup-"* ]; then
            BACKUP_DIR=$(ls -d .sync-backup-* | head -n 1)
            echo "Restoring from backup: $BACKUP_DIR"
            cp -r "$BACKUP_DIR"/* ./
            rm -rf "$BACKUP_DIR"
          fi

      - name: Create sync report
        if: always()
        run: |
          {
            echo "### 동기화 결과 - ${{ matrix.team.name }} 팀"
            echo "- 저장소: ${{ matrix.team.repo }}"
            echo "- 상태: ${{ job.status }}"
            echo "- 브랜치: sync/shared-update"

            if [ -d "target-repo" ]; then
              cd target-repo
              if git diff --cached --quiet; then
                echo "- 변경사항: 없음"
              else
                echo "- 변경된 디렉토리:"
                git diff --cached --name-only | grep "/" | cut -d/ -f1 | sort -u | sed 's/^/  - /'
                echo "- 변경된 파일:"
                git diff --cached --name-only | sed 's/^/  - /'
              fi
            fi
          } >> $GITHUB_STEP_SUMMARY
